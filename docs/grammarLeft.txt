<expression 2> ::= <relational operator> <simple expression> | <empty>
<relational operator> ::= IGUAL | DIFERENTE | MENOR | MENORIGUAL | MAIORIGUAL | MAIOR | IN
<simple expression> ::= <term> <simple expression 1> | <sign> <term> <simple expression 1>
<simple expression 1> ::= <adding operator> <term> <simple expression 1> | <empty>
<adding operator> ::= MAIS | MENOS | OR
<term> ::= <factor> <term 1>
<term 1> ::= <multiplying operator> <factor> <term 1> | <empty>
<multiplying operator> ::= VEZES | DIVISAO | DIV | MOD | AND
<factor> ::= ID <factor 2> | <unsigned constant> | ABREPAR <expression> FECHAPAR | <set> | NOT <factor>
<factor 2> ::= <variable 2> <factor 3> | <function designator 1> |<empty>
<factor 3> ::= <array variable> | <record variable> | <empty>
<unsigned constant> ::= <unsigned number> | STRING | NIL
<function designator > ::= ID <function designator 1>
<function designator 1> ::= ABREPAR <actual parameter> {VIRGULA <actual parameter>} FECHAPAR | <empty>
<set> ::= ABRERET <element list> FECHARET
<element list> ::= <element> {VIRGULA <element> } | <empty>
<element> ::= <expression> <element 1>
<element 1> ::= PONTOPONTO <expression> | <empty>
<procedure statement> ::= ID <function designator 1>
<actual parameter> ::= <expression> | <unsigned constant>| ID <factor 2>
<go to statement> ::= GOTO NUMINT
<empty> ::=
<structured statement> ::= <compound statement> | <conditional statement> | <repetitive statement> | <with statement>
<compound statement> ::= BEGIN <statement> { PONTOVIRGULA <statement> } END
<conditional statement> ::= <if statement> | <case statement>
<if statement> ::= IF <expression> THEN <statement> <if statement 2>
<if statement 2> ::= ELSE <statement> | <empty>
<case statement> ::= CASE <expression> OF <case list element> {PONTOVIRGULA <case list element> } END
<case list element> ::= <case label list> PONTO <statement> | <empty>
<case label list> ::= <constant> {VIRGULA <constant>}
<repetitive statement> ::= <while statement> | <repeat statemant> | <for statement>
<while statement> ::= WHILE <expression> DO <statement>
<repeat statement> ::= REPEAT <statement> {PONTOVIRGULA <statement>} UNTIL <expression>
<for statement> ::= FOR ID DOISPONTOSIGUAL <for list> DO <statement>
<for list> ::= <expression> <for list 1>
<for list 1> ::=  TO <expression> | DOWNTO <expression>
<with statement> ::= WITH <record variable list> DO <statement>
<record variable list> ::= <variable> {VIRGULA <variable>}
