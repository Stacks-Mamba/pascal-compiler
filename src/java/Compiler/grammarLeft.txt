<type> ::= <scalar type> | <subrange type> | <structured type> | ID | <empty>
<structured type> ::= <array type> | <record type> | <set type> | <file type>
<array type> ::= ARRAY [ <index type> { VIRGULA <index type>} ] OF <type>
<record type> ::= RECORD <field list> END
<field list> ::= <fixed part> <fixed part 1> | <variant part>
<fixed part 1> ::= PONTOVIRGULA <variant part> | <empty>
<fixed part> ::= <record section> {PONTOVIRGULA <record section>}
<record section> ::= ID {VIRGULA ID} PONTOVIRGULA <type> | <empty>
<variant type> ::= CASE <tag field> ID OF <variant> { PONTOVIRGULA <variant>}
<tag field> ::= ID DOISPONTOS | <empty>
<variant> ::= <case label list> DOISPONTOS ABREPAR <field list> FECHAPAR | <empty>
<case label list> ::= <constant> {VIRGULA <constant>}
<set type> ::=SET OF <base type>
<base type> ::= <scalar type> | <subrange type> | ID
<file type> ::= FILE OF <type>
<variable declaration part> ::= <empty> | VAR <variable declaration> {PONTOVIRGULA <variable declaration>} PONTOVIRGULA
<variable declaration> ::= ID {VIRGULA ID} DOISPONTOS <type>
<procedure and function declaration part> ::= {<procedure or function declaration> PONTOVIRGULA}
<procedure or function declaration> ::= <procedure declaration> | <function declaration>
<procedure declaration> ::= <procedure heading> <block>
<procedure heading> ::= PROCEDURE ID <procedure heading 1>
<procedure heading 1> ::= PONTOVIRGULA |ABREPAR <formal parameter section> {PONTOVIRGULA <formal parameter section>} FECHAPAR PONTOVIRGULA
<formal parameter section> ::= <parameter group> | VAR <parameter group> | FUNCTION <parameter group> | PROCEDURE ID { VIRGULA ID}
<parameter group> ::= ID {VIRGULA ID} DOISPONTOS <type>
<function declaration> ::= <function heading> <block>
<function heading> ::= FUNCTION ID <function heading 1>
<function heading 1> ::= DOISPONTOS <result type> PONTOVIRGULA |ABREPAR <formal parameter section> {PONTOVIRGULA <formal parameter section>} FECHAPAR DOISPONTOS <type> PONTOVIRGULA
<statement part> ::= <compound statement>
<statement> ::= <unlabelled statement> | NUMINT DOISPONTOS <unlabelled statement>
<unlabelled statement> ::= <simple statement> | <structured statement>
<simple statement> ::= ID <simple statement 1> | <go to statement> | <empty>
<simple statement 1> ::= <variable 2> DOISPONTOSIGUAL <expression> | <function designator 1>
<assignment statement> ::=ID <variable 2> DOISPONTOSIGUAL <expression>
<variable> ::= ID <variable 2>
<variable 2>  ::= <array variable> <variable 2> | <record variable>  <variable 2> | <empty>
<record variable>  ::=  PONTO ID
<array variable> ::= ABRERET <expression> {VIRGULA <expression>} FECHARET
<expression> ::= <simple expression> <expression 2>
<expression 2> ::= <relational operator> <simple expression> | <empty>
<relational operator> ::= IGUAL | DIFERENTE | MENOR | MENORIGUAL | MAIORIGUAL | MAIOR | IN
<simple expression> ::= <term> | <sign> <term>| <simple expression> <adding operator> <term>
<adding operator> ::= MAIS | MENOS | OR
<term> ::= <factor> <term 1>
<term 1> ::= <multiplying operator> <factor> <term 1> | <empty>
<multiplying operator> ::= VEZES | DIVISAO | DIV | MOD | AND
<factor> ::= ID <factor 2> | <unsigned constant> | ABREPAR <expression> FECHAPAR | <set> | NOT <factor>
<factor 2> ::= <variable 2> <factor 3> | <function designator 1> |<empty>
<factor 3> ::= <array variable> | <record variable> | <empty>
<unsigned constant> ::= <unsigned number> | STRING | ID | NIL
<function designator > ::= ID <function designator 1>
<function designator 1> ::= ABREPAR <actual parameter> {VIRGULA <actual parameter>} FECHAPAR | <empty>
<set> ::= ABRERET <element list> FECHARET
<element list> ::= <element> {VIRGULA <element> } | <empty>
<element> ::= <expression> <element 1>
<element 1> ::= PONTOPONTO <expression> | <empty>
<procedure statement> ::= ID <function designator 1>
<actual parameter> ::= <expression> | <unsigned constant>| ID <factor 2>
<go to statement> ::= GOTO NUMINT
<empty> ::=
<structured statement> ::= <compound statement> | <conditional statement> | <repetitive statement> | <with statement>
<compound statement> ::= BEGIN <statement> { PONTOVIRGULA <statement> } END PONTOVIRGULA
<conditional statement> ::= <if statement> | <case statement>
<if statement> ::= IF <expression> THEN <statement> <if statement 2>
<if statement 2> ::= ELSE <statement> | <empty>
<case statement> ::= CASE <expression> OF <case list element> {PONTOVIRGULA <case list element> } END
<case list element> ::= <case label list> PONTO <statement> | <empty>
<case label list> ::= <constant> {VIRGULA <constant>}
<repetitive statement> ::= <while statement> | <repeat statemant> | <for statement>
<while statement> ::= WHILE <expression> DO <statement>
<repeat statement> ::= REPEAT <statement> {PONTOVIRGULA <statement>} UNTIL <expression>
<for statement> ::= FOR ID DOISPONTOSIGUAL <for list> DO <statement>
<for list> ::= <expression> <for list 1>
<for list 1> ::=  TO <expression> | DOWNTO <expression>
<with statement> ::= WITH <record variable list> DO <statement>
<record variable list> ::= <variable> {VIRGULA <variable>}
