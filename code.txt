case "atrib":
    token = new Token(Tokens.ATRIB,lexema,numeroLinha);
    break;
case "numint":
    token = new Token(Tokens.NUMINT,lexema,numeroLinha);
    break;
case "numreal":
    token = new Token(Tokens.NUMREAL,lexema,numeroLinha);
    break;
case "divisao":
    token = new Token(Tokens.DIVISAO,lexema,numeroLinha);
    break;
case "id":
    token = new Token(Tokens.ID,lexema,numeroLinha);
    break;
case "eof":
    token = new Token(Tokens.EOF,lexema,numeroLinha);
    break;
case "erro":
    token = new Token(Tokens.ERRO,lexema,numeroLinha);
    break;
case "igual":
    token = new Token(Tokens.IGUAL,lexema,numeroLinha);
    break;
case "menor":
    token = new Token(Tokens.MENOR,lexema,numeroLinha);
    break;
case "diferente":
    token = new Token(Tokens.DIFERENTE,lexema,numeroLinha);
    break;
case "menorigual":
    token = new Token(Tokens.MENORIGUAL,lexema,numeroLinha);
    break;
case "maior":
    token = new Token(Tokens.MAIOR,lexema,numeroLinha);
    break;
case "maiorigual":
    token = new Token(Tokens.MAIORIGUAL,lexema,numeroLinha);
    break;
case "mais":
    token = new Token(Tokens.MAIS,lexema,numeroLinha);
    break;
case "menos":
    token = new Token(Tokens.MENOS,lexema,numeroLinha);
    break;
case "vezes":
    token = new Token(Tokens.VEZES,lexema,numeroLinha);
    break;
case "ponto":
    token = new Token(Tokens.PONTO,lexema,numeroLinha);
    break;
case "pontoponto":
    token = new Token(Tokens.PONTOPONTO,lexema,numeroLinha);
    break;
case "doispontos":
    token = new Token(Tokens.DOISPONTOS,lexema,numeroLinha);
    break;
case "doispontosigual":
    token = new Token(Tokens.DOISPONTOSIGUAL,lexema,numeroLinha);
    break;
case "abrepar":
    token = new Token(Tokens.ABREPAR,lexema,numeroLinha);
    break;
case "abrefechapar":
    token = new Token(Tokens.ABREFECHAPAR,lexema,numeroLinha);
    break;
case "fechapar":
    token = new Token(Tokens.FECHAPAR,lexema,numeroLinha);
    break;
case "abreret":
    token = new Token(Tokens.ABRERET,lexema,numeroLinha);
    break;
case "fecharet":
    token = new Token(Tokens.FECHARET,lexema,numeroLinha);
    break;
case "virgula":
    token = new Token(Tokens.VIRGULA,lexema,numeroLinha);
    break;
case "barran":
    token = new Token(Tokens.BARRAN,lexema,numeroLinha);
    break;
case "pontovirgula":
    token = new Token(Tokens.PONTOVIRGULA,lexema,numeroLinha);
    break;
case "barra":
    token = new Token(Tokens.BARRA,lexema,numeroLinha);
    break;
case "til":
    token = new Token(Tokens.TIL,lexema,numeroLinha);
    break;
case "arroba":
    token = new Token(Tokens.ARROBA,lexema,numeroLinha);
    break;
case "cifrao":
    token = new Token(Tokens.CIFRAO,lexema,numeroLinha);
    break;
case "sustenido":
    token = new Token(Tokens.SUSTENIDO,lexema,numeroLinha);
    break;
case "maisigual":
    token = new Token(Tokens.MAISIGUAL,lexema,numeroLinha);
    break;
case "menosigual":
    token = new Token(Tokens.MENOSIGUAL,lexema,numeroLinha);
    break;
case "vezesigual":
    token = new Token(Tokens.VEZESIGUAL,lexema,numeroLinha);
    break;
case "barraigual":
    token = new Token(Tokens.BARRAIGUAL,lexema,numeroLinha);
    break;
case "abrecomentario":
    token = new Token(Tokens.ABRECOMENTARIO,lexema,numeroLinha);
    break;
case "fechacomentario":
    token = new Token(Tokens.FECHACOMENTARIO,lexema,numeroLinha);
    break;
case "abreparponto":
    token = new Token(Tokens.ABREPARPONTO,lexema,numeroLinha);
    break;
case "pontofechapar":
    token = new Token(Tokens.PONTOFECHAPAR,lexema,numeroLinha);
    break;
case "barrabarra":
    token = new Token(Tokens.BARRABARRA,lexema,numeroLinha);
    break;
case "under":
    token = new Token(Tokens.UNDER,lexema,numeroLinha);
    break;
case "tabulacao":
    token = new Token(Tokens.TABULACAO,lexema,numeroLinha);
    break;
case "absolute":
    token = new Token(Tokens.ABSOLUTE,lexema,numeroLinha);
    break;
case "else":
    token = new Token(Tokens.ELSE,lexema,numeroLinha);
    break;
case "nil":
    token = new Token(Tokens.NIL,lexema,numeroLinha);
    break;
case "set":
    token = new Token(Tokens.SET,lexema,numeroLinha);
    break;
case "and":
    token = new Token(Tokens.AND,lexema,numeroLinha);
    break;
case "end":
    token = new Token(Tokens.END,lexema,numeroLinha);
    break;
case "not":
    token = new Token(Tokens.NOT,lexema,numeroLinha);
    break;
case "shl":
    token = new Token(Tokens.SHL,lexema,numeroLinha);
    break;
case "array":
    token = new Token(Tokens.ARRAY,lexema,numeroLinha);
    break;
case "object":
    token = new Token(Tokens.OBJECT,lexema,numeroLinha);
    break;
case "shr":
    token = new Token(Tokens.SHR,lexema,numeroLinha);
    break;
case "asm":
    token = new Token(Tokens.ASM,lexema,numeroLinha);
    break;
case "for":
    token = new Token(Tokens.FOR,lexema,numeroLinha);
    break;
case "of":
    token = new Token(Tokens.OF,lexema,numeroLinha);
    break;
case "string":
    token = new Token(Tokens.STRING,lexema,numeroLinha);
    break;
case "int":
    token = new Token(Tokens.INT,lexema,numeroLinha);
    break;
case "real":
    token = new Token(Tokens.REAL,lexema,numeroLinha);
    break;
case "double":
    token = new Token(Tokens.DOUBLE,lexema,numeroLinha);
    break;
case "char":
    token = new Token(Tokens.CHAR,lexema,numeroLinha);
    break;
case "bool":
    token = new Token(Tokens.BOOL,lexema,numeroLinha);
    break;
case "constante":
    token = new Token(Tokens.CONSTANTE,lexema,numeroLinha);
    break;
case "begin":
    token = new Token(Tokens.BEGIN,lexema,numeroLinha);
    break;
case "function":
    token = new Token(Tokens.FUNCTION,lexema,numeroLinha);
    break;
case "on":
    token = new Token(Tokens.ON,lexema,numeroLinha);
    break;
case "then":
    token = new Token(Tokens.THEN,lexema,numeroLinha);
    break;
case "break":
    token = new Token(Tokens.BREAK,lexema,numeroLinha);
    break;
case "goto":
    token = new Token(Tokens.GOTO,lexema,numeroLinha);
    break;
case "operator":
    token = new Token(Tokens.OPERATOR,lexema,numeroLinha);
    break;
case "to":
    token = new Token(Tokens.TO,lexema,numeroLinha);
    break;
case "case":
    token = new Token(Tokens.CASE,lexema,numeroLinha);
    break;
case "if":
    token = new Token(Tokens.IF,lexema,numeroLinha);
    break;
case "or":
    token = new Token(Tokens.OR,lexema,numeroLinha);
    break;
case "type":
    token = new Token(Tokens.TYPE,lexema,numeroLinha);
    break;
case "const":
    token = new Token(Tokens.CONST,lexema,numeroLinha);
    break;
case "implementation":
    token = new Token(Tokens.IMPLEMENTATION,lexema,numeroLinha);
    break;
case "packed":
    token = new Token(Tokens.PACKED,lexema,numeroLinha);
    break;
case "unit":
    token = new Token(Tokens.UNIT,lexema,numeroLinha);
    break;
case "constructor":
    token = new Token(Tokens.CONSTRUCTOR,lexema,numeroLinha);
    break;
case "in":
    token = new Token(Tokens.IN,lexema,numeroLinha);
    break;
case "procedure":
    token = new Token(Tokens.PROCEDURE,lexema,numeroLinha);
    break;
case "until":
    token = new Token(Tokens.UNTIL,lexema,numeroLinha);
    break;
case "continue":
    token = new Token(Tokens.CONTINUE,lexema,numeroLinha);
    break;
case "inherited":
    token = new Token(Tokens.INHERITED,lexema,numeroLinha);
    break;
case "program":
    token = new Token(Tokens.PROGRAM,lexema,numeroLinha);
    break;
case "uses":
    token = new Token(Tokens.USES,lexema,numeroLinha);
    break;
case "destructor":
    token = new Token(Tokens.DESTRUCTOR,lexema,numeroLinha);
    break;
case "inline":
    token = new Token(Tokens.INLINE,lexema,numeroLinha);
    break;
case "record":
    token = new Token(Tokens.RECORD,lexema,numeroLinha);
    break;
case "var":
    token = new Token(Tokens.VAR,lexema,numeroLinha);
    break;
case "div":
    token = new Token(Tokens.DIV,lexema,numeroLinha);
    break;
case "interface":
    token = new Token(Tokens.INTERFACE,lexema,numeroLinha);
    break;
case "reintroduce":
    token = new Token(Tokens.REINTRODUCE,lexema,numeroLinha);
    break;
case "while":
    token = new Token(Tokens.WHILE,lexema,numeroLinha);
    break;
case "do":
    token = new Token(Tokens.DO,lexema,numeroLinha);
    break;
case "label":
    token = new Token(Tokens.LABEL,lexema,numeroLinha);
    break;
case "str":
    token = new Token(Tokens.STR,lexema,numeroLinha);
    break;
case "repeat":
    token = new Token(Tokens.REPEAT,lexema,numeroLinha);
    break;
case "with":
    token = new Token(Tokens.WITH,lexema,numeroLinha);
    break;
case "downto":
    token = new Token(Tokens.DOWNTO,lexema,numeroLinha);
    break;
case "mod":
    token = new Token(Tokens.MOD,lexema,numeroLinha);
    break;
case "self":
    token = new Token(Tokens.SELF,lexema,numeroLinha);
    break;
case "xor":
    token = new Token(Tokens.XOR,lexema,numeroLinha);
    break;
case "as":
    token = new Token(Tokens.AS,lexema,numeroLinha);
    break;
case "class":
    token = new Token(Tokens.CLASS,lexema,numeroLinha);
    break;
case "except":
    token = new Token(Tokens.EXCEPT,lexema,numeroLinha);
    break;
case "exports":
    token = new Token(Tokens.EXPORTS,lexema,numeroLinha);
    break;
case "finalization":
    token = new Token(Tokens.FINALIZATION,lexema,numeroLinha);
    break;
case "finally":
    token = new Token(Tokens.FINALLY,lexema,numeroLinha);
    break;
case "initialization":
    token = new Token(Tokens.INITIALIZATION,lexema,numeroLinha);
    break;
case "is":
    token = new Token(Tokens.IS,lexema,numeroLinha);
    break;
case "library":
    token = new Token(Tokens.LIBRARY,lexema,numeroLinha);
    break;
case "out":
    token = new Token(Tokens.OUT,lexema,numeroLinha);
    break;
case "property":
    token = new Token(Tokens.PROPERTY,lexema,numeroLinha);
    break;
case "raise":
    token = new Token(Tokens.RAISE,lexema,numeroLinha);
    break;
case "threadvar":
    token = new Token(Tokens.THREADVAR,lexema,numeroLinha);
    break;
case "try":
    token = new Token(Tokens.TRY,lexema,numeroLinha);
    break;
case "dispose":
    token = new Token(Tokens.DISPOSE,lexema,numeroLinha);
    break;
case "false":
    token = new Token(Tokens.FALSE,lexema,numeroLinha);
    break;
case "true":
    token = new Token(Tokens.TRUE,lexema,numeroLinha);
    break;
case "exit":
    token = new Token(Tokens.EXIT,lexema,numeroLinha);
    break;
case "new":
    token = new Token(Tokens.NEW,lexema,numeroLinha);
    break;
case "otherwise":
    token = new Token(Tokens.OTHERWISE,lexema,numeroLinha);
    break;
case "file":
    token = new Token(Tokens.FILE,lexema,numeroLinha);
    break;
